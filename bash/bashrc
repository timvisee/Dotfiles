# ~/.bashrc: executed by bash for non-login shells.

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# Append to the history file, don't overwrite it
shopt -s histappend

# Set the history length
HISTSIZE=1000
HISTFILESIZE=2000

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# Make less more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Set a fancy prompt
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# Colored prompt, if the terminal has the capability
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Include aliasses if the file exists
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Enable programmable completion features
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Enable the transfer extension
if [ -f ~/.config/bash/transfer.sh ]; then
    source ~/.config/bash/transfer.sh
fi

# Source Rust's cargo environment
if [ -f ~/.cargo/env ]; then
    source ~/.cargo/env
fi

# Configure Go's environment
if [ -d "/usr/lib/go" ]; then
    export GOROOT=/usr/lib/go
    export GOPATH=$HOME/.go
    export PATH=$PATH:$GOROOT/bin
fi

# Configure composer
if [ -d "$HOME/.composer/vendor/bin" ]; then
    export PATH=$PATH:$HOME/.composer/vendor/bin
fi

# Remove all Docker containers
function docker_remove_containers() {
    echo "Removing all Docker containers..."
    docker rm $(docker ps -aq)
    echo "Done"
}

# Clean Docker, by removing things like dangling images.
function docker_clean() {
    echo "Cleaning up dangling Docker images..."

    DANGLING_IMAGES=`docker images -f "dangling=true" -q`
    if [ $DANGLING_IMAGES ]; then
        docker rmi $DANGLING_IMAGES
    else
        echo "No dangling Docker images to remove"
    fi

    echo "Done"
}

# Clean up Docker, by removing all containers and images
function docker_clean_all() {
    echo "Resetting Docker..."

    docker_remove_containers
    docker_clean

    rm -f ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/Docker.qcow2

    echo "Done"
}

# Set the preferred editor
export EDITOR=vim
