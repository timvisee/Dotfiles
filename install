#!/bin/bash

# Elevate permissions
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# Get the current directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Action: install, uninstall
ACTION=""
CUSTOM="yes"
DO_BASH="yes"
DO_FISH="yes"
DO_TMUX="yes"
DO_VIM="yes"
DO_GIT="yes"
DO_HTOP="yes"
DO_IFTOP="yes"
DO_CAVA="yes"
DO_CSGO="yes"

# Log a normal message.
# $1: Message.
log_normal() {
  # Print a message in orange
  printf "\e[0;33m    $1\e[0m\n"
}

# Log a success message.
# $1: Message.
log_success() {
  # Print a message in green with a checkmark
  printf "\e[0;32m[✔] $1\e[0m\n"
}

# Log an error message.
# $1: Message.
log_error() {
  # Print a message in red with a cross
  printf "\e[0;31m[✖] $1 $2\e[0m\n"
}

# Log a question message.
# $1: Message.
log_question() {
  # Print a message in orange with a question mark
  printf "\e[0;33m[?] $1\e[0m\n"
}

# Log an info message.
# $1: Message
log_info() {
  # Print an indented message in purple
  printf "\e[0;35m    $1\e[0m\n"
}

# Log a result message.
# $1: Exit code.
# $2: Message.
# $3: "true" to exit on error.
log_result() {
  [ $1 -eq 0 ] \
    && print_success "$2" \
    || print_error "$2"

  [ "$3" == "true" ] && [ $1 -ne 0 ] && exit
}

# Get the user that executed the script.
# If the script is run as root user with the sudo command, the user that called
# sudo is returned if known, instead of the 'root' user.
get_command_user() {
    # Check whether we're running root, the user probably used sudo
    if [ $USER == "root" ]; then
        # Return the sudo user if known
        if [ -n $SUDO_USER ]; then
            echo "$SUDO_USER"
            return
        fi
    fi

    # Return the real current user
    echo "$USER"
}

# Get the home directory of the user that executed the script.
# If the script is run as root user with the sudo command, the user that called
# sudo is returned if known, instead of the 'root' user.
get_command_user_home_dir() {
    # Get the command user
    CMD_USER="$(get_command_user)"

    # Use a different method for Mac OS X
    if [[ "$OSTYPE" == "darwin"* ]]; then
        eval echo "~$CMD_USER"
        return;
    fi

    # Get and echo the user's home directory
    sudo getent passwd "$CMD_USER" | cut -d: -f6
}

# Symlink a dotfile to a file in the dotfiles repository.
# $1: File in repository.
# $2: Target dotfile.
symlink_file() {
    # Unlink current links
    if [[ -L "$2" ]]; then
        log_info "[Unlink]   dotfile: '$2'..."
        unlink "$2"
    fi

    # Backup original files
    if [[ -e "$2" ]]; then
        log_info "[Backup]   dotfile: '$2'"
        log_info "                to: '$2.old'..."
        mv "$2" "$2.old"
    fi

    # Get the directory the link is created in
    LINK_DIR=$(dirname "$2")

    # Make sure the directory the link is created in exists
    if [ ! -d "$LINK_DIR" ]; then
        log_info "[Create] directory: '$LINK_DIR'..."
        mkdir -p "$LINK_DIR"
    fi

    # Link the file    
    log_info "[ Link ]   dotfile: '$1'"
    log_info "                to: '$2'..."
    ln -s "$1" "$2"

    return 0
}

# Unlink a previously symlinked dotfile.
# $1: File to unlink.
unlink_file() {
    # Make sure the given file path is a link
    if [[ ! -L "$1" ]]; then
        return 0
    fi

    # Unlink the current file
    log_info "[Unlink ]  dotfile: '$1'..."
    unlink "$1"

    # Revert the backup if it exists
    if [[ -e "$1.old" ]]; then
        log_info "[Restore]   backup: '$1.old'"
        log_info "                to: '$1'..."
        mv "$1.old" "$1"
    fi

    return 0
}

# Symlink or unlink the dotfile depending on the selected action.
# $1: File in repository.
# $2: Target dotfile.
do_file() {
    if [ $ACTION == "install" ]; then
        symlink_file "$1" "$2"
    else
        unlink_file "$2"
    fi
}

# Source the given file if it exists
# $1: File to source
source_file() {
    if [[ -e "$1" ]]; then
        log_info "[Source]    source: '$1'..."
        source "$1"
    fi
}

# Header
echo
log_normal "Dotfiles installer"
log_normal "by Tim Visee, timvisee.com"
echo

# Log the dotfiles directory
log_normal "Dotfiles directory: $DIR"
echo

# Get the command user and log it
CMD_USER="$(get_command_user)"
CMD_USER_HOME_DIR="$(get_command_user_home_dir)"
log_normal "User: $CMD_USER"
log_normal "User directory: $CMD_USER_HOME_DIR"
echo

# Ask whether to install or uninstall
log_question "Would you like to install or uninstall dotfiles?"
PS3="Choose your action: "
select ENTRY in "Install everything" "Install custom" "Uninstall everything" "Uninstall custom" "Quit"
do
    case $ENTRY in
        "Install everything")
            ACTION=install
            CUSTOM=no
            break
            ;;
        "Install custom")
            ACTION=install
            CUSTOM=yes
            break
            ;;
        "Uninstall everything")
            ACTION=uninstall
            CUSTOM=no
            break
            ;;
        "Uninstall custom")
            ACTION=uninstall
            CUSTOM=yes
            break
            ;;
        "Quit")
            log_success "Quitted by user."
            exit
            ;;
    esac
done
echo

# Ask the user what things to install and not
if [ $CUSTOM == "yes" ]; then
    # Ask whether to install bash files
    log_question "Would you like to $ACTION bash dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_BASH=yes
                break
                ;;
            No)
                DO_BASH=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install fish files
    log_question "Would you like to $ACTION fish dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_FISH=yes
                break ;;
            No)
                DO_FISH=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install tmux files
    log_question "Would you like to $ACTION tmux dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_TMUX=yes
                break
                ;;
            No)
                DO_TMUX=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install Vim files
    log_question "Would you like to $ACTION Vim dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_VIM=yes
                break
                ;;
            No)
                DO_VIM=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install Git files
    log_question "Would you like to $ACTION Git dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_GIT=yes
                break
                ;;
            No)
                DO_GIT=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install htop files
    log_question "Would you like to $ACTION htop dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_HTOP=yes
                break
                ;;
            No)
                DO_HTOP=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install cava files
    log_question "Would you like to $ACTION cava dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_CAVA=yes
                break
                ;;
            No)
                DO_CAVA=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install iftop files
    log_question "Would you like to $ACTION iftop dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_IFTOP=yes
                break
                ;;
            No)
                DO_IFTOP=no
                break
                ;;
        esac
    done
    echo

    # Ask whether to install CS:GO files
    log_question "Would you like to $ACTION CS:GO (game) dotfiles?"
    PS3="Choose your action: "
    select ENTRY in Yes No
    do
        case $ENTRY in
            Yes)
                DO_CSGO=yes
                break
                ;;
            No)
                DO_CSGO=no
                break
                ;;
        esac
    done
    echo

    log_success "Configuration complete."
    echo
fi

log_normal "Starting dotfiles update..."
echo

# Install bash
if [ $DO_BASH == "yes" ]; then
    log_normal "Updating bash dotfiles..."
    do_file "$DIR/bash/bashrc" $CMD_USER_HOME_DIR/.bashrc
    do_file "$DIR/bash/bash_profile" $CMD_USER_HOME_DIR/.bash_profile
    do_file "$DIR/bash/bash_aliases" $CMD_USER_HOME_DIR/.bash_aliases
    do_file "$DIR/bash/bash/transfer.sh" $CMD_USER_HOME_DIR/.config/bash/transfer.sh
    log_success "Updated bash dotfiles."
    echo
fi

# Install fish
if [ $DO_FISH == "yes" ]; then
    log_normal "Updating fish dotfiles..."
    do_file "$DIR/fish/config.fish" $CMD_USER_HOME_DIR/.config/fish/config.fish
    do_file "$DIR/fish/aliases.fish" $CMD_USER_HOME_DIR/.config/fish/aliases.fish
    do_file "$DIR/fish/nvm.fish" $CMD_USER_HOME_DIR/.config/fish/nvm.fish
    do_file "$DIR/fish/prompt.fish" $CMD_USER_HOME_DIR/.config/fish/prompt.fish
    do_file "$DIR/fish/transfer.fish" $CMD_USER_HOME_DIR/.config/fish/transfer.fish
    log_success "Updated fish dotfiles."
    echo
fi

# Install tmux
if [ $DO_TMUX == "yes" ]; then
    log_normal "Updating tmux dotfiles..."
    do_file "$DIR/tmux/tmux.conf" $CMD_USER_HOME_DIR/.tmux.conf
    do_file "$DIR/tmux/tmux/tmux_lt_2.1.conf" $CMD_USER_HOME_DIR/.tmux/tmux_lt_2.1.conf
    do_file "$DIR/tmux/tmux/tmux_ge_2.1.conf" $CMD_USER_HOME_DIR/.tmux/tmux_ge_2.1.conf
    do_file "$DIR/tmux/tmux/load_version_specific" $CMD_USER_HOME_DIR/.tmux/load_version_specific
    log_success "Updated tmux dotfiles."
    echo
fi

# Install vim
if [ $DO_VIM == "yes" ]; then
    log_normal "Updating vim dotfiles..."
    do_file "$DIR/vim/vimrc" $CMD_USER_HOME_DIR/.vimrc
    do_file "$DIR/vim/vimrc" $CMD_USER_HOME_DIR/.ideavimrc
    do_file "$DIR/vim/vimrc" $CMD_USER_HOME_DIR/.nvimrc
    do_file "$DIR/vim/vimrc" $CMD_USER_HOME_DIR/.config/nvim/init.vim
    do_file "$DIR/vim/plugin/abolish.vim" $CMD_USER_HOME_DIR/.vim/plugin/abolish.vim
    do_file "$DIR/vim/plugin/dragvisuals.vim" $CMD_USER_HOME_DIR/.vim/plugin/dragvisuals.vim
    do_file "$DIR/vim/plugin/gitgutter.vim" $CMD_USER_HOME_DIR/.vim/plugin/gitgutter.vim
    do_file "$DIR/vim/doc/gitgutter.txt" $CMD_USER_HOME_DIR/.vim/doc/gitgutter.txt
    do_file "$DIR/vim/autoload/gitgutter.vim" $CMD_USER_HOME_DIR/.vim/autoload/gitgutter.vim
    do_file "$DIR/vim/autoload/gitgutter/async.vim" $CMD_USER_HOME_DIR/.vim/autoload/gitgutter/async.vim
    do_file "$DIR/vim/autoload/gitgutter/debug.vim" $CMD_USER_HOME_DIR/.vim/autoload/gitgutter/debug.vim
    do_file "$DIR/vim/autoload/gitgutter/diff.vim" $CMD_USER_HOME_DIR/.vim/autoload/gitgutter/diff.vim
    do_file "$DIR/vim/autoload/gitgutter/highlight.vim" $CMD_USER_HOME_DIR/.vim/autoload/gitgutter/highlight.vim
    do_file "$DIR/vim/autoload/gitgutter/hunk.vim" $CMD_USER_HOME_DIR/.vim/autoload/gitgutter/hunk.vim
    do_file "$DIR/vim/autoload/gitgutter/sign.vim" $CMD_USER_HOME_DIR/.vim/autoload/gitgutter/sign.vim
    do_file "$DIR/vim/autoload/gitgutter/utility.vim" $CMD_USER_HOME_DIR/.vim/autoload/gitgutter/utility.vim
    log_success "Updated vim dotfiles."
    echo
fi

# Install git
if [ $DO_GIT == "yes" ]; then
    log_normal "Updating git dotfiles..."
    do_file "$DIR/git/gitconfig.local" $CMD_USER_HOME_DIR/.gitconfig.local
    log_success "Updated git dotfiles."
    echo
fi

# Install htop
if [ $DO_HTOP == "yes" ]; then
    log_normal "Updating htop dotfiles..."
    do_file "$DIR/htop/htoprc" $CMD_USER_HOME_DIR/.config/htop/htoprc
    log_success "Updated htop dotfiles."
    echo
fi

# Install iftop
if [ $DO_IFTOP == "yes" ]; then
    log_normal "Updating iftop dotfiles..."
    do_file "$DIR/iftop/iftoprc" $CMD_USER_HOME_DIR/.iftoprc
    log_success "Updated iftop dotfiles."
    echo
fi

# Install cava
if [ $DO_CAVA == "yes" ]; then
    log_normal "Updating cava dotfiles..."
    do_file "$DIR/cava/config" $CMD_USER_HOME_DIR/.config/cava/config
    log_success "Updated cava dotfiles."
    echo
fi

# Install CS:GO
if [ $DO_CSGO == "yes" ]; then
    if [ -d "$CMD_USER_HOME_DIR/.local/share/Steam/steamapps/common/Counter-Strike Global Offensive" ]; then
        log_normal "Updating CS:GO dotfiles..."
        do_file "$DIR/csgo/autoexec.cfg" "$CMD_USER_HOME_DIR/.local/share/Steam/steamapps/common/Counter-Strike Global Offensive/csgo/cfg/autoexec.cfg"
        log_success "Updated CS:GO dotfiles."
    else
        log_normal "CS:GO not installed, skipping it's dotfiles."
    fi
    echo
fi

# Source bash
# TODO Only source if the bash shell is used
if [ $DO_BASH == "yes" ]; then
    source_file $CMD_USER_HOME_DIR/.bashrc
    source_file $CMD_USER_HOME_DIR/.bash_profile
    log_success "Sourced new bash configurations."
    echo
fi

# Done
log_success "Successfully completed!"
exit

