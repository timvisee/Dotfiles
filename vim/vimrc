""" Configure Vundle
set nocompatible
filetype off

" Add Vundle to the runtime
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" Plugins
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" All of your Plugins must be added before the following line
call vundle#end()



""" General
" We're using Vim, not Vi
set nocompatible

" We've a fast terminal
set ttyfast

" We're using UTF-8 as file/script encoding
scriptencoding utf-8
set encoding=utf-8

" Detect file types and specific indents/settings
filetype on
filetype indent on
filetype plugin on



""" Appearance
" Syntax highlighting
syntax enable

" Dark interface
set background=dark

" Enable 256-color mode for terminals
set t_Co=256

" Relative line numbers
set relativenumber
set number

" Line number on the bar
set ruler

" Highlight the current line
set cul
"hi CursorLine term=none cterm=none ctermbg=3 " Highlight color

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

" Color rows that have lines longer than 81 columns, lines shouldn't be that
" long
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\v%81v', 100)

" Highlight matching brackets
set showmatch

" No text wrapping
set nowrap

" Disable code folding in Markdown
let g:vim_markdown_folding_disabled = 1

" Show 8 rows, 16 columns around the cursor when scrolling, scroll by 1 column
set scrolloff=8
set sidescrolloff=16
set sidescroll=1

" Show commans being typed
set showcmd

" Two lines for the command line
set cmdheight=2

" Always show the status line
set laststatus=2



""" Editing
" Smart indents
set autoindent smartindent
set smarttab

" Integrate with system clipboard
set clipboard=unnamedplus,unnamed



""" Code style
" Tab formatting with 4 spaces
set autoindent
set tabstop=4
set expandtab

" Shift 4 columns (rounded to nearest multiple)
set shiftwidth=4
set shiftround



""" Other utilities
" Ignore case sensitivity, unless there's a capital character
set ignorecase
set smartcase

" Highlight while searching, not after
set nohlsearch
set incsearch

" Store lots of history
set history=1000

" Find recursively in directories
set path+=**

" Show a bigger 'wildmenu' for things like tab completion
set wildmenu



""" Custom keybindings
" Auto expanding
inoremap (; (<CR>);<C-c>O
inoremap (, (<CR>),<C-c>O
inoremap {; {<CR>};<C-c>O
inoremap {, {<CR>},<C-c>O
inoremap [; [<CR>];<C-c>O
inoremap [, [<CR>],<C-c>O



""" Plugins
" Abolish plugin
runtime plugin/abolish.vim

" Dragvisuals plugin
runtime plugin/dragvisuals.vim
vmap <expr> <LEFT>  DVB_Drag('left')
vmap <expr> <RIGHT> DVB_Drag('right')
vmap <expr> <DOWN>  DVB_Drag('down')
vmap <expr> <UP>    DVB_Drag('up')
vmap <expr> D       DVB_Duplicate()

" GitGutter plugin
if has("sign")
	runtime plugin/gitgutter.vim
endif



""" Word count
" Show the word count of the current document in the status bar.
" Inspired by: http://cromwell-intl.com/linux/vim-word-count.html

let g:word_count="?"
function WordCount()
	return g:word_count
endfunction
function UpdateWordCount()
	let lnum = 1
	let n = 0
	while lnum <= line('$')
		let n = n + len(split(getline(lnum)))
		let lnum = lnum + 1
	endwhile
	let g:word_count = n
endfunction

" Update the count when cursor is idle in command or insert mode.
" Update when idle for 1000 msec (default is 4000 msec).
set updatetime=1000
augroup WordCounter
	au! CursorHold,CursorHoldI * call UpdateWordCount()
augroup END

" Set statusline, shown here a piece at a time
highlight User1 ctermbg=green guibg=green ctermfg=black guifg=black
set statusline=%1*			" Switch to User1 color highlight
set statusline+=%<%F			" file name, cut if needed at start
set statusline+=%M			" modified flag
set statusline+=%y			" file type
set statusline+=%=			" separator from left to right justified
set statusline+=\ %{WordCount()}\ words,
set statusline+=\ %l/%L\ lines,\ %P	" percentage through the file
