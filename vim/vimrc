""" Configure Vundle
set nocompatible
filetype off

" Add Vundle to the runtime
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" Plugins
Plugin 'jremmen/vim-ripgrep'
Plugin 'tpope/vim-fugitive'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'scrooloose/nerdtree'
Plugin 'lervag/vimtex'
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-commentary'
Plugin 'airblade/vim-gitgutter'
Plugin 'machakann/vim-sandwich'
Plugin 'tpope/vim-repeat'
Plugin 'hrj/vim-DrawIt'
Plugin 'yangmillstheory/vim-snipe'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'reedes/vim-pencil'

" Editor layout
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'drmingdrmer/vim-tabbar'

" Visualizers
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'

" Appearance
Plugin 'chriskempson/base16-vim'

" Languages
Plugin 'klen/python-mode'
Plugin 'rust-lang/rust.vim'

" File types
Plugin 'chase/vim-ansible-yaml'
Plugin 'dag/vim-fish'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'plasticboy/vim-markdown'

" All of your Plugins must be added before the following line
call vundle#end()



""" General
" We're using Vim, not Vi
set nocompatible

" We've a fast terminal
set ttyfast

" Use lazy redrawing to improve macOS performance
set lazyredraw

" We're using UTF-8 as file/script encoding
scriptencoding utf-8
set encoding=utf-8

" Detect file types and specific indents/settings
filetype on
filetype indent on
filetype plugin on

" Enable use of other .vimrc files in working directories
set exrc

" Use bash as shell (solve compatibility issues)
set shell=/bin/bash



""" Appearance
" Syntax highlighting
syntax enable

" Enable 256-color mode for terminals
set t_Co=256

" Colorscheme
colorscheme base16-tomorrow-night

" Dark interface
set background=dark

" Airline theme
let g:airline_theme='base16'

" Airline Pencil status
if exists("PencilMode")
    let g:airline_section_x = '%{PencilMode()}'
    "let g:pencil#mode_indicators = {'hard': 'H', 'auto': 'A', 'soft': 'S', 'off': '',}
endif

" Relative line numbers
set relativenumber
set number

" Line number on the bar
set ruler

" Highlight the current line
set cursorline
"hi CursorLine term=none cterm=none ctermbg=3 " Highlight color

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

" Color rows that have lines longer than 81 columns, lines shouldn't be that
" long
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\v%81v', 100)

" Highlight TODO
augroup HiglightTodo
    autocmd!
    autocmd WinEnter,VimEnter * :silent! call matchadd('Todo', 'TODO', -1)
augroup END

" Highlight matching brackets
set showmatch

" No text wrapping
set nowrap

" Disable code folding in Markdown
let g:vim_markdown_folding_disabled = 1

" Show 8 rows, 16 columns around the cursor when scrolling, scroll by 1 column
set scrolloff=8
set sidescrolloff=16
set sidescroll=1

" Show commans being typed
set showcmd

" Two lines for the command line
set cmdheight=2

" Always show the status line
set laststatus=2

" Red underline for spelling errors
hi clear SpellBad
hi SpellBad cterm=underline ctermfg=009 guifg=#ff0000

" Tab colors
hi TabLineFill cterm=none ctermfg=darkgray ctermbg=green
hi TabLine cterm=none ctermfg=darkblue ctermbg=green
hi TabLineSel cterm=bold ctermfg=green ctermbg=darkblue

" Highlight all python elements
let python_highlight_all=1



""" Editing
" Make backspace behaviour consistent, like other programs
set backspace=indent,eol,start

" Smart indents
set autoindent smartindent
set smarttab

" Integrate with system clipboard (not on macOS due to problems)
if !has('unix') && !has('mac')
    set clipboard=unnamedplus,unnamed
endif



""" Code style
" Tab formatting with 4 spaces
set autoindent
set tabstop=4
set softtabstop=4
set expandtab
set fileformat=unix

" Shift 4 columns (rounded to nearest multiple)
set shiftwidth=4
set shiftround

" Lines should not be longer than 80 characters
set textwidth=80
let g:pencil#textwidth = 79

" File specific configurations
autocmd FileType ansible setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType json setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType markdown setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2

augroup pencil
    autocmd!
    autocmd FileType markdown call pencil#init({'wrap': 'hard', 'autoformat': 0})
    autocmd FileType text call pencil#init({'wrap': 'hard', 'autoformat': 0})
augroup END

" Trailing spaces warnings from airline
autocmd FileType * unlet! g:airline#extensions#whitespace#checks
autocmd FileType markdown let g:airline#extensions#whitespace#checks = ['indent']



""" Language
" English and Dutch spelling
set spelllang=en,nl

" Disable spell checking
set nospell

" Enable spell checking for some files
autocmd FileType markdown setlocal spell
autocmd FileType tex setlocal spell



""" Language: Python
" Python versions and executables
"let g:pymode_python='python3'
if has('python3')
    let g:syntastic_python_python_exec='python3'
    let g:syntastic_python_python_exec='python3'
else
    let g:syntastic_python_python_exec='python'
    let g:syntastic_python_python_exec='python'
endif
let g:syntastic_python2_python_exec='python'
let g:syntastic_python3_python_exec='python3'

" Various options
let g:pymode_doc=0
let g:pymode_lint=1
let g:pymode_virtualenv=1
let g:pymode_breakpoint=1
let g:pymode_folding=0
let g:pymode_indent=1
let g:pymode_options_colorcolumn=0

" Highlighting options
let g:pymode_syntax=1
let g:pymode_syntax_slow_sync=1
let g:pymode_syntax_all=1
let g:pymode_syntax_print_as_function=g:pymode_syntax_all
let g:pymode_syntax_highlight_async_await=g:pymode_syntax_all
let g:pymode_syntax_highlight_equal_operator=g:pymode_syntax_all
let g:pymode_syntax_highlight_exceptions=g:pymode_syntax_all
let g:pymode_syntax_highlight_star_operator=g:pymode_syntax_all
let g:pymode_syntax_highlight_self=g:pymode_syntax_all
let g:pymode_syntax_space_errors=g:pymode_syntax_all
let g:pymode_syntax_string_format=g:pymode_syntax_all
let g:pymode_syntax_string_templates=g:pymode_syntax_all
let g:pymode_syntax_docstrings=g:pymode_syntax_all
let g:pymode_syntax_doctests=g:pymode_syntax_all
let g:pymode_syntax_builtin_objs=g:pymode_syntax_all
let g:pymode_syntax_builtin_types=g:pymode_syntax_all

" Run options
let g:pymode_run=1
let g:pymode_run_bind='<F10>'



""" Other utilities and behaviour
" Ignore case sensitivity, unless there's a capital character
set ignorecase
set smartcase

" Wrap searching around
set wrapscan

" Highlight while searching, not after
set nohlsearch
set incsearch

" Store lots of history
set history=1000

" Find recursively in directories
set path+=**

" Show a bigger 'wildmenu' for things like tab completion
set wildmenu

" Split directions
set splitbelow
set splitright

" Always split fugitive diffs vertical
set diffopt+=vertical


""" Custom keybindings
" Map space to the default leader (makes it visible with showcmd)
map <space> <leader>

" Go to definition
map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Funky ctrlp: function search
nnoremap <leader>fu :CtrlPFunky<Cr>
" Funky ctrlp: function search word under cursor
nnoremap <leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

" Auto expanding
inoremap (; (<CR>);<C-c>O
inoremap (, (<CR>),<C-c>O
inoremap {; {<CR>};<C-c>O
inoremap {, {<CR>},<C-c>O
inoremap [; [<CR>];<C-c>O
inoremap [, [<CR>],<C-c>O

" Split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Vim snipe
map <leader><leader>F <Plug>(snipe-F)
map <leader><leader>f <Plug>(snipe-f)
map <leader><leader>T <Plug>(snipe-T)

map <leader><leader>w <Plug>(snipe-w)
map <leader><leader>W <Plug>(snipe-W)
map <leader><leader>e <Plug>(snipe-e)
map <leader><leader>E <Plug>(snipe-E)
map <leader><leader>b <Plug>(snipe-b)
map <leader><leader>B <Plug>(snipe-B)
map <leader><leader>ge <Plug>(snipe-ge)
map <leader><leader>gE <Plug>(snipe-gE)

" Limelight toggle
nmap <leader>l :Limelight!!<CR>
xmap <leader>l :Limelight!!<CR>



""" Plugins
" Abolish plugin
runtime plugin/abolish.vim

" Dragvisuals plugin
runtime plugin/dragvisuals.vim
vmap <expr> <LEFT>  DVB_Drag('left')
vmap <expr> <RIGHT> DVB_Drag('right')
vmap <expr> <DOWN>  DVB_Drag('down')
vmap <expr> <UP>    DVB_Drag('up')
vmap <expr> D       DVB_Duplicate()

" NERDtree
" Open NERDtree when run with no arguments
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Define the tool and browser for markdown preview
let vim_markdown_preview_github = 1
let vim_markdown_preview_browser = 'FirefoxNightly'

" Syntastic options
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_enable_signs=1
let g:syntastic_check_on_wq=0
let g:syntastic_aggregate_errors=1
let g:syntastic_loc_list_height=5
let g:syntastic_error_symbol='X'
let g:syntastic_style_error_symbol='X'
let g:syntastic_warning_symbol='x'
let g:syntastic_style_warning_symbol='x'
let g:syntastic_python_checkers=['flake8', 'pydocstyle', 'python']

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
