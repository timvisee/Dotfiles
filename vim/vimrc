""" Configure Vundle
set nocompatible
filetype off

" Add Vundle to the runtime
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" Plugins
Plugin 'godlygeek/tabular'
Plugin 'jremmen/vim-ripgrep'
Plugin 'tpope/vim-fugitive'
Plugin 'kien/ctrlp.vim'

" Editor layout
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Visualizers
Plugin 'junegunn/goyo.vim'
Plugin 'JamshedVesuna/vim-markdown-preview'
Plugin 'xuhdev/vim-latex-live-preview'

" File types
Plugin 'chase/vim-ansible-yaml'
Plugin 'dag/vim-fish'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'plasticboy/vim-markdown'
Plugin 'rust-lang/rust.vim'

" All of your Plugins must be added before the following line
call vundle#end()



""" General
" We're using Vim, not Vi
set nocompatible

" We've a fast terminal
set ttyfast

" We're using UTF-8 as file/script encoding
scriptencoding utf-8
set encoding=utf-8

" Detect file types and specific indents/settings
filetype on
filetype indent on
filetype plugin on



""" Appearance
" Syntax highlighting
syntax enable

" Dark interface
set background=dark

" Airline theme
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'

" Enable 256-color mode for terminals
set t_Co=256

" Relative line numbers
set relativenumber
set number

" Line number on the bar
set ruler

" Highlight the current line
set cul
"hi CursorLine term=none cterm=none ctermbg=3 " Highlight color

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

" Color rows that have lines longer than 81 columns, lines shouldn't be that
" long
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\v%81v', 100)

" Highlight TODO
augroup HiglightTodo
    autocmd!
    autocmd WinEnter,VimEnter * :silent! call matchadd('Todo', 'TODO', -1)
augroup END

" Highlight matching brackets
set showmatch

" No text wrapping
set nowrap

" Disable code folding in Markdown
let g:vim_markdown_folding_disabled = 1

" Show 8 rows, 16 columns around the cursor when scrolling, scroll by 1 column
set scrolloff=8
set sidescrolloff=16
set sidescroll=1

" Show commans being typed
set showcmd

" Two lines for the command line
set cmdheight=2

" Always show the status line
set laststatus=2

" Red underline for spelling errors
hi clear SpellBad
hi SpellBad cterm=underline ctermfg=009 guifg=#ff0000



""" Editing
" Make backspace behaviour consistent, like other programs
set backspace=indent,eol,start

" Smart indents
set autoindent smartindent
set smarttab

" Integrate with system clipboard (not on macOS due to problems)
if !has('unix') && !has('mac')
    set clipboard=unnamedplus,unnamed
endif



""" Code style
" Tab formatting with 4 spaces
set autoindent
set tabstop=4
set softtabstop=4
set expandtab

" Shift 4 columns (rounded to nearest multiple)
set shiftwidth=4
set shiftround

" File specific configurations
autocmd FileType ansible setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType json setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType markdown setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2



""" Language
" English and Dutch spelling
set spelllang=en,nl

" Disable spell checking
set nospell

" Enable spell checking for some files
autocmd FileType markdown setlocal spell
autocmd FileType tex setlocal spell



""" Other utilities
" Ignore case sensitivity, unless there's a capital character
set ignorecase
set smartcase

" Highlight while searching, not after
set nohlsearch
set incsearch

" Store lots of history
set history=1000

" Find recursively in directories
set path+=**

" Show a bigger 'wildmenu' for things like tab completion
set wildmenu



""" Custom keybindings
" Auto expanding
inoremap (; (<CR>);<C-c>O
inoremap (, (<CR>),<C-c>O
inoremap {; {<CR>};<C-c>O
inoremap {, {<CR>},<C-c>O
inoremap [; [<CR>];<C-c>O
inoremap [, [<CR>],<C-c>O



""" Plugins
" Abolish plugin
runtime plugin/abolish.vim

" Dragvisuals plugin
runtime plugin/dragvisuals.vim
vmap <expr> <LEFT>  DVB_Drag('left')
vmap <expr> <RIGHT> DVB_Drag('right')
vmap <expr> <DOWN>  DVB_Drag('down')
vmap <expr> <UP>    DVB_Drag('up')
vmap <expr> D       DVB_Duplicate()

" GitGutter plugin
if has("sign")
    runtime plugin/gitgutter.vim
endif

" Define the tool and browser for markdown preview
let vim_markdown_preview_github = 1
let vim_markdown_preview_browser = 'FirefoxNightly'
